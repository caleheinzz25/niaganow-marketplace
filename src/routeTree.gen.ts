/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as ObserverRouteImport } from './routes/observer'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AlertsRouteImport } from './routes/alerts'
import { Route as AboutRouteImport } from './routes/about'
import { Route as StoreRouteRouteImport } from './routes/store/route'
import { Route as PaymentRouteRouteImport } from './routes/payment/route'
import { Route as OrderRouteRouteImport } from './routes/order/route'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as AccountRouteRouteImport } from './routes/account/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as OrderIndexRouteImport } from './routes/order/index'
import { Route as StoreUpdateProductRouteImport } from './routes/store/update-product'
import { Route as StoreProductsRouteImport } from './routes/store/products'
import { Route as StoreOrdersRouteImport } from './routes/store/orders'
import { Route as StoreDashboardRouteImport } from './routes/store/dashboard'
import { Route as StoreAddProductRouteImport } from './routes/store/add-product'
import { Route as ProductsProductRouteImport } from './routes/products/$product'
import { Route as PaymentVirtualAccountRouteImport } from './routes/payment/virtual-account'
import { Route as PaymentSuccessRouteImport } from './routes/payment/success'
import { Route as PaymentQrisRouteImport } from './routes/payment/qris'
import { Route as PaymentFailureRouteImport } from './routes/payment/failure'
import { Route as PaymentCancelRouteImport } from './routes/payment/cancel'
import { Route as OrderStatusRouteImport } from './routes/order/status'
import { Route as OrderDetailsRouteImport } from './routes/order/details'
import { Route as OrderCheckoutRouteImport } from './routes/order/checkout'
import { Route as OrderCartRouteImport } from './routes/order/cart'
import { Route as AuthSellerRouteImport } from './routes/auth/seller'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLogoutRouteImport } from './routes/auth/logout'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthAdminRouteImport } from './routes/auth/admin'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminTransactionsRouteImport } from './routes/admin/transactions'
import { Route as AdminStoresRouteImport } from './routes/admin/stores'
import { Route as AdminProductsRouteImport } from './routes/admin/products'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AccountSettingRouteImport } from './routes/account/setting'
import { Route as AccountProfileRouteImport } from './routes/account/profile'
import { Route as AccountMyOrdersRouteImport } from './routes/account/my-orders'
import { Route as AccountAddressRouteImport } from './routes/account/address'
import { Route as CategoryCategoryIdIndexRouteImport } from './routes/category/$categoryId/index'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const ObserverRoute = ObserverRouteImport.update({
  id: '/observer',
  path: '/observer',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AlertsRoute = AlertsRouteImport.update({
  id: '/alerts',
  path: '/alerts',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const StoreRouteRoute = StoreRouteRouteImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentRouteRoute = PaymentRouteRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderRouteRoute = OrderRouteRouteImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRouteRoute = AccountRouteRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderIndexRoute = OrderIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrderRouteRoute,
} as any)
const StoreUpdateProductRoute = StoreUpdateProductRouteImport.update({
  id: '/update-product',
  path: '/update-product',
  getParentRoute: () => StoreRouteRoute,
} as any)
const StoreProductsRoute = StoreProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => StoreRouteRoute,
} as any)
const StoreOrdersRoute = StoreOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => StoreRouteRoute,
} as any)
const StoreDashboardRoute = StoreDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => StoreRouteRoute,
} as any)
const StoreAddProductRoute = StoreAddProductRouteImport.update({
  id: '/add-product',
  path: '/add-product',
  getParentRoute: () => StoreRouteRoute,
} as any)
const ProductsProductRoute = ProductsProductRouteImport.update({
  id: '/products/$product',
  path: '/products/$product',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentVirtualAccountRoute = PaymentVirtualAccountRouteImport.update({
  id: '/virtual-account',
  path: '/virtual-account',
  getParentRoute: () => PaymentRouteRoute,
} as any)
const PaymentSuccessRoute = PaymentSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => PaymentRouteRoute,
} as any)
const PaymentQrisRoute = PaymentQrisRouteImport.update({
  id: '/qris',
  path: '/qris',
  getParentRoute: () => PaymentRouteRoute,
} as any)
const PaymentFailureRoute = PaymentFailureRouteImport.update({
  id: '/failure',
  path: '/failure',
  getParentRoute: () => PaymentRouteRoute,
} as any)
const PaymentCancelRoute = PaymentCancelRouteImport.update({
  id: '/cancel',
  path: '/cancel',
  getParentRoute: () => PaymentRouteRoute,
} as any)
const OrderStatusRoute = OrderStatusRouteImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => OrderRouteRoute,
} as any)
const OrderDetailsRoute = OrderDetailsRouteImport.update({
  id: '/details',
  path: '/details',
  getParentRoute: () => OrderRouteRoute,
} as any)
const OrderCheckoutRoute = OrderCheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => OrderRouteRoute,
} as any)
const OrderCartRoute = OrderCartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => OrderRouteRoute,
} as any)
const AuthSellerRoute = AuthSellerRouteImport.update({
  id: '/auth/seller',
  path: '/auth/seller',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLogoutRoute = AuthLogoutRouteImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAdminRoute = AuthAdminRouteImport.update({
  id: '/auth/admin',
  path: '/auth/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminTransactionsRoute = AdminTransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminStoresRoute = AdminStoresRouteImport.update({
  id: '/stores',
  path: '/stores',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminProductsRoute = AdminProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AccountSettingRoute = AccountSettingRouteImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountProfileRoute = AccountProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountMyOrdersRoute = AccountMyOrdersRouteImport.update({
  id: '/my-orders',
  path: '/my-orders',
  getParentRoute: () => AccountRouteRoute,
} as any)
const AccountAddressRoute = AccountAddressRouteImport.update({
  id: '/address',
  path: '/address',
  getParentRoute: () => AccountRouteRoute,
} as any)
const CategoryCategoryIdIndexRoute = CategoryCategoryIdIndexRouteImport.update({
  id: '/category/$categoryId/',
  path: '/category/$categoryId/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/order': typeof OrderRouteRouteWithChildren
  '/payment': typeof PaymentRouteRouteWithChildren
  '/store': typeof StoreRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/alerts': typeof AlertsRoute
  '/contact': typeof ContactRoute
  '/observer': typeof ObserverRoute
  '/terms': typeof TermsRoute
  '/test': typeof TestRoute
  '/account/address': typeof AccountAddressRoute
  '/account/my-orders': typeof AccountMyOrdersRoute
  '/account/profile': typeof AccountProfileRoute
  '/account/setting': typeof AccountSettingRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/stores': typeof AdminStoresRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/admin': typeof AuthAdminRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/seller': typeof AuthSellerRoute
  '/order/cart': typeof OrderCartRoute
  '/order/checkout': typeof OrderCheckoutRoute
  '/order/details': typeof OrderDetailsRoute
  '/order/status': typeof OrderStatusRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/failure': typeof PaymentFailureRoute
  '/payment/qris': typeof PaymentQrisRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/payment/virtual-account': typeof PaymentVirtualAccountRoute
  '/products/$product': typeof ProductsProductRoute
  '/store/add-product': typeof StoreAddProductRoute
  '/store/dashboard': typeof StoreDashboardRoute
  '/store/orders': typeof StoreOrdersRoute
  '/store/products': typeof StoreProductsRoute
  '/store/update-product': typeof StoreUpdateProductRoute
  '/order/': typeof OrderIndexRoute
  '/products': typeof ProductsIndexRoute
  '/category/$categoryId': typeof CategoryCategoryIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/payment': typeof PaymentRouteRouteWithChildren
  '/store': typeof StoreRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/alerts': typeof AlertsRoute
  '/contact': typeof ContactRoute
  '/observer': typeof ObserverRoute
  '/terms': typeof TermsRoute
  '/test': typeof TestRoute
  '/account/address': typeof AccountAddressRoute
  '/account/my-orders': typeof AccountMyOrdersRoute
  '/account/profile': typeof AccountProfileRoute
  '/account/setting': typeof AccountSettingRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/stores': typeof AdminStoresRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/admin': typeof AuthAdminRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/seller': typeof AuthSellerRoute
  '/order/cart': typeof OrderCartRoute
  '/order/checkout': typeof OrderCheckoutRoute
  '/order/details': typeof OrderDetailsRoute
  '/order/status': typeof OrderStatusRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/failure': typeof PaymentFailureRoute
  '/payment/qris': typeof PaymentQrisRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/payment/virtual-account': typeof PaymentVirtualAccountRoute
  '/products/$product': typeof ProductsProductRoute
  '/store/add-product': typeof StoreAddProductRoute
  '/store/dashboard': typeof StoreDashboardRoute
  '/store/orders': typeof StoreOrdersRoute
  '/store/products': typeof StoreProductsRoute
  '/store/update-product': typeof StoreUpdateProductRoute
  '/order': typeof OrderIndexRoute
  '/products': typeof ProductsIndexRoute
  '/category/$categoryId': typeof CategoryCategoryIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/order': typeof OrderRouteRouteWithChildren
  '/payment': typeof PaymentRouteRouteWithChildren
  '/store': typeof StoreRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/alerts': typeof AlertsRoute
  '/contact': typeof ContactRoute
  '/observer': typeof ObserverRoute
  '/terms': typeof TermsRoute
  '/test': typeof TestRoute
  '/account/address': typeof AccountAddressRoute
  '/account/my-orders': typeof AccountMyOrdersRoute
  '/account/profile': typeof AccountProfileRoute
  '/account/setting': typeof AccountSettingRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/stores': typeof AdminStoresRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/admin': typeof AuthAdminRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/seller': typeof AuthSellerRoute
  '/order/cart': typeof OrderCartRoute
  '/order/checkout': typeof OrderCheckoutRoute
  '/order/details': typeof OrderDetailsRoute
  '/order/status': typeof OrderStatusRoute
  '/payment/cancel': typeof PaymentCancelRoute
  '/payment/failure': typeof PaymentFailureRoute
  '/payment/qris': typeof PaymentQrisRoute
  '/payment/success': typeof PaymentSuccessRoute
  '/payment/virtual-account': typeof PaymentVirtualAccountRoute
  '/products/$product': typeof ProductsProductRoute
  '/store/add-product': typeof StoreAddProductRoute
  '/store/dashboard': typeof StoreDashboardRoute
  '/store/orders': typeof StoreOrdersRoute
  '/store/products': typeof StoreProductsRoute
  '/store/update-product': typeof StoreUpdateProductRoute
  '/order/': typeof OrderIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/category/$categoryId/': typeof CategoryCategoryIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/admin'
    | '/order'
    | '/payment'
    | '/store'
    | '/about'
    | '/alerts'
    | '/contact'
    | '/observer'
    | '/terms'
    | '/test'
    | '/account/address'
    | '/account/my-orders'
    | '/account/profile'
    | '/account/setting'
    | '/admin/dashboard'
    | '/admin/products'
    | '/admin/stores'
    | '/admin/transactions'
    | '/admin/users'
    | '/auth/admin'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/register'
    | '/auth/seller'
    | '/order/cart'
    | '/order/checkout'
    | '/order/details'
    | '/order/status'
    | '/payment/cancel'
    | '/payment/failure'
    | '/payment/qris'
    | '/payment/success'
    | '/payment/virtual-account'
    | '/products/$product'
    | '/store/add-product'
    | '/store/dashboard'
    | '/store/orders'
    | '/store/products'
    | '/store/update-product'
    | '/order/'
    | '/products'
    | '/category/$categoryId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/admin'
    | '/payment'
    | '/store'
    | '/about'
    | '/alerts'
    | '/contact'
    | '/observer'
    | '/terms'
    | '/test'
    | '/account/address'
    | '/account/my-orders'
    | '/account/profile'
    | '/account/setting'
    | '/admin/dashboard'
    | '/admin/products'
    | '/admin/stores'
    | '/admin/transactions'
    | '/admin/users'
    | '/auth/admin'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/register'
    | '/auth/seller'
    | '/order/cart'
    | '/order/checkout'
    | '/order/details'
    | '/order/status'
    | '/payment/cancel'
    | '/payment/failure'
    | '/payment/qris'
    | '/payment/success'
    | '/payment/virtual-account'
    | '/products/$product'
    | '/store/add-product'
    | '/store/dashboard'
    | '/store/orders'
    | '/store/products'
    | '/store/update-product'
    | '/order'
    | '/products'
    | '/category/$categoryId'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/admin'
    | '/order'
    | '/payment'
    | '/store'
    | '/about'
    | '/alerts'
    | '/contact'
    | '/observer'
    | '/terms'
    | '/test'
    | '/account/address'
    | '/account/my-orders'
    | '/account/profile'
    | '/account/setting'
    | '/admin/dashboard'
    | '/admin/products'
    | '/admin/stores'
    | '/admin/transactions'
    | '/admin/users'
    | '/auth/admin'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/register'
    | '/auth/seller'
    | '/order/cart'
    | '/order/checkout'
    | '/order/details'
    | '/order/status'
    | '/payment/cancel'
    | '/payment/failure'
    | '/payment/qris'
    | '/payment/success'
    | '/payment/virtual-account'
    | '/products/$product'
    | '/store/add-product'
    | '/store/dashboard'
    | '/store/orders'
    | '/store/products'
    | '/store/update-product'
    | '/order/'
    | '/products/'
    | '/category/$categoryId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRouteRoute: typeof AccountRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  OrderRouteRoute: typeof OrderRouteRouteWithChildren
  PaymentRouteRoute: typeof PaymentRouteRouteWithChildren
  StoreRouteRoute: typeof StoreRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  AlertsRoute: typeof AlertsRoute
  ContactRoute: typeof ContactRoute
  ObserverRoute: typeof ObserverRoute
  TermsRoute: typeof TermsRoute
  TestRoute: typeof TestRoute
  AuthAdminRoute: typeof AuthAdminRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthSellerRoute: typeof AuthSellerRoute
  ProductsProductRoute: typeof ProductsProductRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  CategoryCategoryIdIndexRoute: typeof CategoryCategoryIdIndexRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/observer': {
      id: '/observer'
      path: '/observer'
      fullPath: '/observer'
      preLoaderRoute: typeof ObserverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/alerts': {
      id: '/alerts'
      path: '/alerts'
      fullPath: '/alerts'
      preLoaderRoute: typeof AlertsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/store': {
      id: '/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order': {
      id: '/order'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order/': {
      id: '/order/'
      path: '/'
      fullPath: '/order/'
      preLoaderRoute: typeof OrderIndexRouteImport
      parentRoute: typeof OrderRouteRoute
    }
    '/store/update-product': {
      id: '/store/update-product'
      path: '/update-product'
      fullPath: '/store/update-product'
      preLoaderRoute: typeof StoreUpdateProductRouteImport
      parentRoute: typeof StoreRouteRoute
    }
    '/store/products': {
      id: '/store/products'
      path: '/products'
      fullPath: '/store/products'
      preLoaderRoute: typeof StoreProductsRouteImport
      parentRoute: typeof StoreRouteRoute
    }
    '/store/orders': {
      id: '/store/orders'
      path: '/orders'
      fullPath: '/store/orders'
      preLoaderRoute: typeof StoreOrdersRouteImport
      parentRoute: typeof StoreRouteRoute
    }
    '/store/dashboard': {
      id: '/store/dashboard'
      path: '/dashboard'
      fullPath: '/store/dashboard'
      preLoaderRoute: typeof StoreDashboardRouteImport
      parentRoute: typeof StoreRouteRoute
    }
    '/store/add-product': {
      id: '/store/add-product'
      path: '/add-product'
      fullPath: '/store/add-product'
      preLoaderRoute: typeof StoreAddProductRouteImport
      parentRoute: typeof StoreRouteRoute
    }
    '/products/$product': {
      id: '/products/$product'
      path: '/products/$product'
      fullPath: '/products/$product'
      preLoaderRoute: typeof ProductsProductRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment/virtual-account': {
      id: '/payment/virtual-account'
      path: '/virtual-account'
      fullPath: '/payment/virtual-account'
      preLoaderRoute: typeof PaymentVirtualAccountRouteImport
      parentRoute: typeof PaymentRouteRoute
    }
    '/payment/success': {
      id: '/payment/success'
      path: '/success'
      fullPath: '/payment/success'
      preLoaderRoute: typeof PaymentSuccessRouteImport
      parentRoute: typeof PaymentRouteRoute
    }
    '/payment/qris': {
      id: '/payment/qris'
      path: '/qris'
      fullPath: '/payment/qris'
      preLoaderRoute: typeof PaymentQrisRouteImport
      parentRoute: typeof PaymentRouteRoute
    }
    '/payment/failure': {
      id: '/payment/failure'
      path: '/failure'
      fullPath: '/payment/failure'
      preLoaderRoute: typeof PaymentFailureRouteImport
      parentRoute: typeof PaymentRouteRoute
    }
    '/payment/cancel': {
      id: '/payment/cancel'
      path: '/cancel'
      fullPath: '/payment/cancel'
      preLoaderRoute: typeof PaymentCancelRouteImport
      parentRoute: typeof PaymentRouteRoute
    }
    '/order/status': {
      id: '/order/status'
      path: '/status'
      fullPath: '/order/status'
      preLoaderRoute: typeof OrderStatusRouteImport
      parentRoute: typeof OrderRouteRoute
    }
    '/order/details': {
      id: '/order/details'
      path: '/details'
      fullPath: '/order/details'
      preLoaderRoute: typeof OrderDetailsRouteImport
      parentRoute: typeof OrderRouteRoute
    }
    '/order/checkout': {
      id: '/order/checkout'
      path: '/checkout'
      fullPath: '/order/checkout'
      preLoaderRoute: typeof OrderCheckoutRouteImport
      parentRoute: typeof OrderRouteRoute
    }
    '/order/cart': {
      id: '/order/cart'
      path: '/cart'
      fullPath: '/order/cart'
      preLoaderRoute: typeof OrderCartRouteImport
      parentRoute: typeof OrderRouteRoute
    }
    '/auth/seller': {
      id: '/auth/seller'
      path: '/auth/seller'
      fullPath: '/auth/seller'
      preLoaderRoute: typeof AuthSellerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/admin': {
      id: '/auth/admin'
      path: '/auth/admin'
      fullPath: '/auth/admin'
      preLoaderRoute: typeof AuthAdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/transactions': {
      id: '/admin/transactions'
      path: '/transactions'
      fullPath: '/admin/transactions'
      preLoaderRoute: typeof AdminTransactionsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/stores': {
      id: '/admin/stores'
      path: '/stores'
      fullPath: '/admin/stores'
      preLoaderRoute: typeof AdminStoresRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/account/setting': {
      id: '/account/setting'
      path: '/setting'
      fullPath: '/account/setting'
      preLoaderRoute: typeof AccountSettingRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/profile': {
      id: '/account/profile'
      path: '/profile'
      fullPath: '/account/profile'
      preLoaderRoute: typeof AccountProfileRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/my-orders': {
      id: '/account/my-orders'
      path: '/my-orders'
      fullPath: '/account/my-orders'
      preLoaderRoute: typeof AccountMyOrdersRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/account/address': {
      id: '/account/address'
      path: '/address'
      fullPath: '/account/address'
      preLoaderRoute: typeof AccountAddressRouteImport
      parentRoute: typeof AccountRouteRoute
    }
    '/category/$categoryId/': {
      id: '/category/$categoryId/'
      path: '/category/$categoryId'
      fullPath: '/category/$categoryId'
      preLoaderRoute: typeof CategoryCategoryIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AccountRouteRouteChildren {
  AccountAddressRoute: typeof AccountAddressRoute
  AccountMyOrdersRoute: typeof AccountMyOrdersRoute
  AccountProfileRoute: typeof AccountProfileRoute
  AccountSettingRoute: typeof AccountSettingRoute
}

const AccountRouteRouteChildren: AccountRouteRouteChildren = {
  AccountAddressRoute: AccountAddressRoute,
  AccountMyOrdersRoute: AccountMyOrdersRoute,
  AccountProfileRoute: AccountProfileRoute,
  AccountSettingRoute: AccountSettingRoute,
}

const AccountRouteRouteWithChildren = AccountRouteRoute._addFileChildren(
  AccountRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminProductsRoute: typeof AdminProductsRoute
  AdminStoresRoute: typeof AdminStoresRoute
  AdminTransactionsRoute: typeof AdminTransactionsRoute
  AdminUsersRoute: typeof AdminUsersRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminProductsRoute: AdminProductsRoute,
  AdminStoresRoute: AdminStoresRoute,
  AdminTransactionsRoute: AdminTransactionsRoute,
  AdminUsersRoute: AdminUsersRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface OrderRouteRouteChildren {
  OrderCartRoute: typeof OrderCartRoute
  OrderCheckoutRoute: typeof OrderCheckoutRoute
  OrderDetailsRoute: typeof OrderDetailsRoute
  OrderStatusRoute: typeof OrderStatusRoute
  OrderIndexRoute: typeof OrderIndexRoute
}

const OrderRouteRouteChildren: OrderRouteRouteChildren = {
  OrderCartRoute: OrderCartRoute,
  OrderCheckoutRoute: OrderCheckoutRoute,
  OrderDetailsRoute: OrderDetailsRoute,
  OrderStatusRoute: OrderStatusRoute,
  OrderIndexRoute: OrderIndexRoute,
}

const OrderRouteRouteWithChildren = OrderRouteRoute._addFileChildren(
  OrderRouteRouteChildren,
)

interface PaymentRouteRouteChildren {
  PaymentCancelRoute: typeof PaymentCancelRoute
  PaymentFailureRoute: typeof PaymentFailureRoute
  PaymentQrisRoute: typeof PaymentQrisRoute
  PaymentSuccessRoute: typeof PaymentSuccessRoute
  PaymentVirtualAccountRoute: typeof PaymentVirtualAccountRoute
}

const PaymentRouteRouteChildren: PaymentRouteRouteChildren = {
  PaymentCancelRoute: PaymentCancelRoute,
  PaymentFailureRoute: PaymentFailureRoute,
  PaymentQrisRoute: PaymentQrisRoute,
  PaymentSuccessRoute: PaymentSuccessRoute,
  PaymentVirtualAccountRoute: PaymentVirtualAccountRoute,
}

const PaymentRouteRouteWithChildren = PaymentRouteRoute._addFileChildren(
  PaymentRouteRouteChildren,
)

interface StoreRouteRouteChildren {
  StoreAddProductRoute: typeof StoreAddProductRoute
  StoreDashboardRoute: typeof StoreDashboardRoute
  StoreOrdersRoute: typeof StoreOrdersRoute
  StoreProductsRoute: typeof StoreProductsRoute
  StoreUpdateProductRoute: typeof StoreUpdateProductRoute
}

const StoreRouteRouteChildren: StoreRouteRouteChildren = {
  StoreAddProductRoute: StoreAddProductRoute,
  StoreDashboardRoute: StoreDashboardRoute,
  StoreOrdersRoute: StoreOrdersRoute,
  StoreProductsRoute: StoreProductsRoute,
  StoreUpdateProductRoute: StoreUpdateProductRoute,
}

const StoreRouteRouteWithChildren = StoreRouteRoute._addFileChildren(
  StoreRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRouteRoute: AccountRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  OrderRouteRoute: OrderRouteRouteWithChildren,
  PaymentRouteRoute: PaymentRouteRouteWithChildren,
  StoreRouteRoute: StoreRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  AlertsRoute: AlertsRoute,
  ContactRoute: ContactRoute,
  ObserverRoute: ObserverRoute,
  TermsRoute: TermsRoute,
  TestRoute: TestRoute,
  AuthAdminRoute: AuthAdminRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthSellerRoute: AuthSellerRoute,
  ProductsProductRoute: ProductsProductRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  CategoryCategoryIdIndexRoute: CategoryCategoryIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
